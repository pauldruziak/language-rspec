'.source.ruby.rspec':
  'describe (String)':
    'prefix': 'des'
    'body': "describe \"${1:subject}\" do\n  $0\nend"
  'describe (type)':
    'prefix': 'dest'
    'body': 'describe ${1:Type} do\n  $0\nend'
  'describe (type, string)':
    'prefix': 'dests'
    'body': "describe ${1:Type}, \"${2:description}\" do\n  $0\nend"
  'it (does something)':
    'prefix': 'it'
    'body': "it \"${1:does something}\"${2: do\n  $0\nend}"
  'Matcher (Custom)':
    'prefix': 'matc'
    'body': 'class ${1:ReverseTo}\n  def initialize($3)\n    @$3 = $3\n  end\n\n  def matches?(actual)\n    @actual = actual\n    # Satisfy expectation here. Return false or raise an error if it\'s not met.\n    ${0:@actual.reverse.should == @$3}\n    true\n  end\n\n  def failure_message_for_should\n    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn\'t"\n  end\n\n  def failure_message_for_should_not\n    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"\n  end\nend\n\ndef ${2:reverse_to}(${3:expected})\n  $1.new($3)\nend'
  'Matcher (DSL)':
    'prefix': 'mat'
    'body': 'RSpec::Matchers.define :${1:name} do |${2:expected}|\n  match do |${3:actual}|\n    $3.$1?($2)\n  end\nend\n'
  'Require spec_helper':
    'prefix': 'reqs'
    'body': 'require \'spec_helper\'\n\n'
  'Require rails_helper':
    'prefix': 'reqr'
    'body': 'require \'rails_helper\'\n\n'
  'controller_name':
    'prefix': 'conn'
    'body': 'controller_name :${1:controller}'
  'and_raise':
    'prefix': 'anr'
    'body': 'and_raise(${1:exception})'
  'and_return with block':
    'prefix': 'anrb'
    'body': 'and_return { $1 }'
  'and_return with args':
    'prefix': 'andra'
    'body': 'and_return(${1:value})'
  'and_throw':
    'prefix': 'ant'
    'body': 'and_throw(${1:sym})'
  'and_yield':
    'prefix': 'any'
    'body': 'and_yield(${1:values})'
  'any_number_of_times':
    'prefix': 'annot'
    'body': 'any_number_of_times'
  'at_least':
    'prefix': 'atl'
    'body': 'at_least(${1:n}).times'
  'at_most':
    'prefix': 'atm'
    'body': 'at_most(${1:n}).times'
  'change':
    'prefix': 'ch'
    'body': 'change { $1 }'
  'configure':
    'prefix': 'cnf'
    'body': 'RSpec.configure do |config|\n  config.$0\nend'
  'context':
    'prefix': 'con'
    'body': "context \"${1:context}\" do\n  $0\nend"
  'describe (Controller)':
    'prefix': 'desc'
    'body': 'require File.expand_path(File.dirname(__FILE__) + \'/../spec_helper\')\n\ndescribe ${1:controller} do\n  $0\nend'
  'describe (RESTful Controller)':
    'prefix': 'desrc'
    'body': "describe ${1:controller}, \"${2:GET|POST|PUT|DELETE} ${3:/some/path}${4: with some parameters}\" do\n  $0\nend"
  'exactly':
    'prefix': 'ex'
    'body': 'exactly(${1:n}).times'
  'expect':
    'prefix': 'exp'
    'body': 'expect(${1:subject}).${2:not_}to ${3:${4:eq} ${5:object}}'
  'expect with block':
    'prefix': 'expb'
    'body': 'expect { ${1:target} }.${2:not_}to ${3:raise_error}'
  'feature':
    'prefix': 'sce'
    'body': "scenario '${1:scenario description}' do\n  $0\nend"
  'it (should do something)':
    'prefix': 'its'
    'body': "it \"should ${1:do something}\"${2: do\n  $0\nend}"
  'let':
    'prefix': 'let'
    'body': 'let(:${1:instance}) { $0 }'
  'mock':
    'prefix': 'moc'
    'body': "${1:var} = mock('${2:mock_name}'${3:, :null_object => true})\n$0"
  'mock_model':
    'prefix': 'mm'
    'body': 'mock_model(${1:model})$0'
  'mock_with':
    'prefix': 'mocw'
    'body': 'RSpec::Runner.configure do |config|\n\tconfig.mock_with :${0:mocha|flexmock|rr}\nend'
  'once':
    'prefix': 'on'
    'body': 'once'
  'should be_success':
    'prefix': 'shbs'
    'body': 'response.should be_success\n$0'
  'should_not be_success':
    'prefix': 'shnbs'
    'body': 'response.should_not be_success\n$0'
  'before':
    'prefix': 'bef'
    'body': 'before(${1::each}) do\n  $0\nend'
  'should ==':
    'prefix': 'sh='
    'body': '${1:target}.should == ${2:value}\n$0'
  'should =~':
    'prefix': 'shm'
    'body': '${1:target}.should =~ /${2:regexp}/\n$0'
  'should eql':
    'prefix': 'she'
    'body': '${1:target}.should eql(${2:value})\n$0'
  'should be':
    'prefix': 'shb'
    'body': '${1:target}.should be(${2:result})\n$0'
  'should be_kind_of':
    'prefix': 'shbko'
    'body': '${1:target}.should be_a_kind_of(${2:klass})\n$0'
  'should be_instance_of':
    'prefix': 'shbio'
    'body': '${1:target}.should be_instance_of(${2:klass})\n$0'
  'should be_close':
    'prefix': 'shbc'
    'body': '${1:target}.should be_close(${2:result}, ${3:tolerance})\n$0'
  'should be_redirect':
    'prefix': 'shbr'
    'body': 'response.should be_redirect\n$0'
  'should equal':
    'prefix': 'she'
    'body': '${1:target}.should equal(${2:value})\n$0'
  'should have':
    'prefix': 'shh'
    'body': '${1:target}.should have(${2:num}).${3:things}\n$0'
  'should have_at_least':
    'prefix': 'shhal'
    'body': '${1:target}.should have_at_least(${2:num}).${3:things}\n$0'
  'should have_at_most':
    'prefix': 'shham'
    'body': '${1:target}.should have_at_most(${2:num}).${3:things}\n$0'
  'should have_records':
    'prefix': 'shhr'
    'body': '${1:target}.should have(${2:x}).records\n$0'
  'should match':
    'prefix': 'shm'
    'body': '${1:target}.should match(/${2:regexp}/)\n$0'
  'should_not ==':
    'prefix': 'shn='
    'body': '${1:target}.should_not == ${2:value}\n$0'
  'should_not =~':
    'prefix': 'shnm'
    'body': '${1:target}.should_not =~ /${2:regexp}/\n$0'
  'should_not eql':
    'prefix': 'shne'
    'body': '${1:target}.should_not eql(${2:value})\n$0'
  'should_not be':
    'prefix': 'shnb'
    'body': '${1:target}.should_not be(${2:result})\n$0'
  'should_not be_kind_of':
    'prefix': 'shkof'
    'body': '${1:target}.should_not be_a_kind_of(${2:klass})\n$0'
  'should_not be_instance_of':
    'prefix': 'shbio'
    'body': '${1:target}.should_not be_instance_of(${2:klass})\n$0'
  'should_not be_close':
    'prefix': 'shnbc'
    'body': '${1:target}.should_not be_close(${2:result}, ${3:tolerance})\n$0'
  'should_not be_redirect':
    'prefix': 'shnbr'
    'body': 'response.should_not be_redirect\n$0'
  'should_not equal':
    'prefix': 'shne'
    'body': '${1:target}.should_not equal(${2:value})\n$0'
  'should_not match':
    'prefix': 'shnm'
    'body': '${1:target}.should_not match(/${2:regexp}/)\n$0'
  'should_not predicate':
    'prefix': 'shnp'
    'body': '${1:target}.should_not ${2:be_${3:predicate}} $4\n$0'
  'should_not raise_error':
    'prefix': 'shnre'
    'body': 'lambda { $1 }.should_not raise_error(${2:error})\n$0'
  'should_not_receive':
    'prefix': 'shnr'
    'body': '${1:mock}.should_not_receive(:${2:message})$3\n$0\n'
  'should_not respond_to':
    'prefix': 'shnrt'
    'body': '${1:target}.should_not respond_to(:${2:sym})\n$0'
  'should_not satisfy':
    'prefix': 'shns'
    'body': '${1:target}.should_not satisfy { |obj| $2 }\n$0'
  'should_not throw':
    'prefix': 'shnt'
    'body': 'lambda { $1 }.should_not throw_symbol(:${2:symbol})\n$0'
  'should predicate':
    'prefix': 'shp'
    'body': '${1:target}.should ${2:be_${3:predicate}} $4\n$0'
  'should raise_error':
    'prefix': 'shre'
    'body': 'lambda { $1 }.should raise_error(${2:error})\n$0'
  'should_receive':
    'prefix': 'shr'
    'body': '${1:mock}.should_receive(:${2:message})$3'
  'with args':
    'prefix': 'wia'
    'body': 'with(${1})$2'
  'should redirect_to':
    'prefix': 'shrt'
    'body': 'response.should redirect_to(${1:url})\n$0'
  'should render_template':
    'prefix': 'shrt'
    'body': 'response.should render_template(:${1:template})\n$0'
  'should respond_to':
    'prefix': 'shrt'
    'body': '${1:target}.should respond_to(:${2:sym})\n$0'
  'should satisfy':
    'prefix': 'shs'
    'body': '${1:target}.should satisfy { |obj| $2 }\n$0'
  'should throw':
    'prefix': 'sht'
    'body': 'lambda { $1 }.should throw_symbol(:${2:symbol})\n$0'
  'specify':
    'prefix': 'spec'
    'body': 'specify { ${1:behavior} }'
  'stub':
    'prefix': 'stu'
    'body': '${1:double}.stub(:${2:message})$3'
  'subject':
    'prefix': 'subj'
    'body': 'subject(:${1:instance}) { $0 }'
  'after':
    'prefix': 'aft'
    'body': 'after(${1::each}) do\n  $0\nend'
  'twice':
    'prefix': 'tw'
    'body': 'twice'
